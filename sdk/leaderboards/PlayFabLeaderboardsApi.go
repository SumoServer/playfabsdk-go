package leaderboards

// This code was generated by a tool. Any changes may be overwritten

import (
    "encoding/json"

    playfab "github.com/dgkanatsios/playfabsdk-go/sdk"

    "github.com/mitchellh/mapstructure"
)

// CreateStatisticDefinition create a new entity statistic definition.
// https://api.playfab.com/Documentation/Leaderboards/method/CreateStatisticDefinition
func CreateStatisticDefinition(settings *playfab.Settings, postData *CreateStatisticDefinitionRequestModel, entityToken string) (*EmptyResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Statistic/CreateStatisticDefinition", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteStatisticDefinition delete an entity statistic definition. Will delete all statistics on entity profiles and leaderboards.
// https://api.playfab.com/Documentation/Leaderboards/method/DeleteStatisticDefinition
func DeleteStatisticDefinition(settings *playfab.Settings, postData *DeleteStatisticDefinitionRequestModel, entityToken string) (*EmptyResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Statistic/DeleteStatisticDefinition", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteStatistics delete statistics on an entity profile, will remove all rankings from associated leaderboards.
// https://api.playfab.com/Documentation/Leaderboards/method/DeleteStatistics
func DeleteStatistics(settings *playfab.Settings, postData *DeleteStatisticsRequestModel, entityToken string) (*DeleteStatisticsResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Statistic/DeleteStatistics", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &DeleteStatisticsResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetLeaderboard get the leaderboard for a specific entity type and statistic.
// https://api.playfab.com/Documentation/Leaderboards/method/GetLeaderboard
func GetLeaderboard(settings *playfab.Settings, postData *GetEntityLeaderboardRequestModel, entityToken string) (*GetEntityLeaderboardResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Leaderboard/GetLeaderboard", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &GetEntityLeaderboardResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetLeaderboardAroundEntity get the leaderboard around a specific entity.
// https://api.playfab.com/Documentation/Leaderboards/method/GetLeaderboardAroundEntity
func GetLeaderboardAroundEntity(settings *playfab.Settings, postData *GetLeaderboardAroundEntityRequestModel, entityToken string) (*GetEntityLeaderboardResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Leaderboard/GetLeaderboardAroundEntity", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &GetEntityLeaderboardResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetLeaderboardForEntities get the leaderboard limited to a set of entities.
// https://api.playfab.com/Documentation/Leaderboards/method/GetLeaderboardForEntities
func GetLeaderboardForEntities(settings *playfab.Settings, postData *GetLeaderboardForEntitiesRequestModel, entityToken string) (*GetEntityLeaderboardResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Leaderboard/GetLeaderboardForEntities", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &GetEntityLeaderboardResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetStatisticDefinition get current statistic definition information
// https://api.playfab.com/Documentation/Leaderboards/method/GetStatisticDefinition
func GetStatisticDefinition(settings *playfab.Settings, postData *GetStatisticDefinitionRequestModel, entityToken string) (*GetStatisticDefinitionResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Statistic/GetStatisticDefinition", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &GetStatisticDefinitionResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetStatisticDefinitions get all current statistic definitions information
// https://api.playfab.com/Documentation/Leaderboards/method/GetStatisticDefinitions
func GetStatisticDefinitions(settings *playfab.Settings, postData *GetStatisticDefinitionsRequestModel, entityToken string) (*GetStatisticDefinitionsResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Statistic/GetStatisticDefinitions", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &GetStatisticDefinitionsResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// IncrementStatisticVersion increment an entity statistic definition version.
// https://api.playfab.com/Documentation/Leaderboards/method/IncrementStatisticVersion
func IncrementStatisticVersion(settings *playfab.Settings, postData *IncrementStatisticVersionRequestModel, entityToken string) (*IncrementStatisticVersionResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Statistic/IncrementStatisticVersion", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &IncrementStatisticVersionResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateStatistics update statistics on an entity profile, depending on the statistic definition may cause entity to be ranked on various
// leaderboards.
// https://api.playfab.com/Documentation/Leaderboards/method/UpdateStatistics
func UpdateStatistics(settings *playfab.Settings, postData *UpdateStatisticsRequestModel, entityToken string) (*UpdateStatisticsResponseModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Statistic/UpdateStatistics", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateStatisticsResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}



